{"version":3,"sources":["Components/GlowButton/GlowButton.js","Components/GlowSelectBox/GlowSelectBox.js","Components/CustomSlider/CustomSlider.js","Components/Navbar/Navbar.js","Components/Footer/Footer.js","Components/Legend/Legend.js","Components/Stats/Stats.js","Components/AlgorithmExplained/binaryheap.PNG","Components/AlgorithmExplained/mergesort.webp","Components/AlgorithmExplained/AlgorithmExplained.js","Components/Details/Details.js","Components/Blocks/Blocks.js","Algorithms/BubbleSort.js","Algorithms/HeapSort.js","Algorithms/InsertionSort.js","Algorithms/MergeSort.js","Algorithms/QuickSort.js","Algorithms/SelectionSort.js","App.js","index.js"],"names":["GlowButton","props","className","color","onClick","handleRandomize","handleSort","handleDetails","disabled","sorting","icon","id","text","GlowSelectBox","onChange","handleAlgorithm","value","algorithm","CustomSlider","sliderColor","symbol","min","max","React","useState","speed","size","setValue","style","Typography","sentence","title","Grid","container","spacing","alignItems","item","xs","Slider","event","newValue","handleSpeed","handleSize","aria-labelledby","Input","margin","val","target","isNaN","Number","onBlur","Navbar","sliderVal","Footer","href","rel","Legend","oneIsEqual","beingCompared","expected","i","length","Stats","stability","space","timeBest","timeWorst","timeAverage","AlgorithExplained","display","src","binaryHeap","alt","mergesort","Details","detailsHeight","window","innerWidth","details","minHeight","Blocks","marginSubtract","Math","ceil","blocks","width","setWidth","useEffect","addEventListener","floor","map","block","backgroundColor","sortedValue","includes","compare","quickIndex","swap","height","styles","a","b","list","temp","bubbleSort","dupBlocks","slice","order","j","push","heapify","startNode","endNode","leftNode","rightNode","maxVal","heapSort","buildMaxHeap","insertionSort","currentElem","mergeSortWorker","start","end","middle","pos1","pos2","combine","mergeSort","quickSortWorker","pivot","pivotSpot","partition","quickSort","selectionSort","App","createNewArray","number","len","tempBlocks","array","random","shuffleArray","setBlocks","setSorting","setIsSorted","setSortedValue","setAlgorithm","setCompare","setSwap","isSorted","setSpeed","setSize","setQuickIndex","hideDetails","setHideDetails","boxSizing","sortArray","values","loop","setTimeout","k","arr","inPlace","prevState","sizePassed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wbA6BeA,EAxBI,SAACC,GAYhB,OACI,sBAAMC,UAAU,aAAhB,SACK,yBACGA,UAAS,mBAAcD,EAAME,OAC7BC,QAbgB,iBAApBH,EAAMC,UACCD,EAAMI,gBACc,YAApBJ,EAAMC,UACND,EAAMK,WACc,eAApBL,EAAMC,UACND,EAAMM,mBADV,EAUCC,SAAYP,EAAMQ,QAHrB,UAIO,mBAAGP,UAAWD,EAAMS,KAAMC,GAAG,SAAYV,EAAMW,WCCpDC,G,MApBO,SAACZ,GAEnB,OACI,qBAAKC,UAAU,gBAAf,SACI,yBACIA,UAAU,kBACVY,SAAWb,EAAMc,gBACjBC,MAAOf,EAAMgB,UACbT,SAAUP,EAAMQ,QAJpB,UAKQ,wBAAQO,MAAM,aAAd,yBACA,wBAAQA,MAAM,WAAd,uBACA,wBAAQA,MAAM,gBAAd,4BACA,wBAAQA,MAAM,YAAd,wBACA,wBAAQA,MAAM,YAAd,wBACA,wBAAQA,MAAM,gBAAd,mC,iDC8ELE,G,MAvFM,SAACjB,GACpB,IA6BIkB,EAQAC,EArCEC,EAA2B,UAApBpB,EAAMC,UAAwB,GAAK,EAC1CoB,EAA2B,UAApBrB,EAAMC,UAAwB,IAAO,IAClD,EAA0BqB,IAAMC,SAA6B,UAApBvB,EAAMC,UAAwBD,EAAMwB,MAAQxB,EAAMyB,MAA3F,mBAAOV,EAAP,KAAcW,EAAd,KA6BER,GADoB,IAAlBlB,EAAMQ,QACM,OAEA,UAKQ,UAApBR,EAAMC,UACRkB,EAAU,cAAC,IAAD,CAAOQ,MAAO,CAACzB,MAAOgB,KACH,SAApBlB,EAAMC,YACfkB,EAAS,mBAAGlB,UAAU,eAAe0B,MAAO,CAACzB,MAAOgB,MActD,OACE,sBAAKjB,UAAU,YAAf,UACE,eAAC2B,EAAA,EAAD,CAAYD,MAAS,CAACzB,MAAOgB,GAA7B,cAbU,WACZ,IAAIW,EAMJ,MALwB,UAApB7B,EAAMC,UACR4B,EAAW,gBAAkB7B,EAAMwB,MAAQ,MACd,SAApBxB,EAAMC,YACf4B,EAAW,gBAAkB7B,EAAMyB,KAAO,WAErCI,EAMwCC,GAA7C,OACA,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAW,SAAvC,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAAV,SACChB,IAED,cAACY,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,SACE,cAACC,EAAA,EAAD,CACEtB,MAAwB,kBAAVA,EAAqBA,EAAQ,EAC3CF,SA7DiB,SAACyB,EAAOC,GACb,UAApBvC,EAAMC,UAAwBD,EAAMwC,YAAYD,GAAYvC,EAAMyC,WAAWF,GAC7Eb,EAASa,IA4DDG,kBAAgB,eAChBrB,IAAOrB,EAAMqB,IACbD,IAAOpB,EAAMoB,IACbb,SAAYP,EAAMQ,YAGtB,cAACuB,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACQ,EAAA,EAAD,CACE5B,MAAOA,EACP6B,OAAO,QACP/B,SAnEgB,SAACyB,GACzB,IAAMO,EAAMP,EAAMQ,OAAO/B,MAEpBgC,MAAMF,KACW,UAApB7C,EAAMC,UAAwBD,EAAMwC,YAAYK,GAAO7C,EAAMyC,WAAWI,GACxEnB,EAASsB,OAAOH,MA+DVI,OA3DS,WACblC,EAAQK,GACU,UAApBpB,EAAMC,UAAwBD,EAAMwC,YAAYpB,GAAOpB,EAAMyC,WAAWrB,GACxEM,EAASN,IACAL,EAAQM,IACG,UAApBrB,EAAMC,UAAwBD,EAAMwC,YAAYnB,GAAOrB,EAAMyC,WAAWpB,GACxEK,EAASL,KAsDHd,SAAYP,EAAMQ,oBCFf0C,G,MA9EA,SAAClD,GACZ,OACI,gCACI,qBAAKC,UAAU,QAAf,SACI,oBAAIA,UAAU,qBAAd,SAAmC,uDAEvC,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,SAAf,UACI,qBAAKA,UAAY,cAAjB,SACI,cAAC,EAAD,CACIA,UAAY,QACZkD,UAAanD,EAAMwB,MACnBJ,IAAO,GACPC,IAAO,IACPG,MAASxB,EAAMwB,MACfgB,YAAexC,EAAMwC,YACrBhC,QAAWR,EAAMQ,YAGzB,qBAAKP,UAAY,aAAjB,SACI,cAAC,EAAD,CACIA,UAAY,OACZkD,UAAanD,EAAMyB,KACnBL,IAAO,EACPC,IAAO,IACPI,KAAQzB,EAAMyB,KACdgB,WAAczC,EAAMyC,WACpBjC,QAAWR,EAAMQ,eAI7B,sBAAKP,UAAY,UAAjB,UACI,sBAAKA,UAAU,MAAf,UACI,sBAAMA,UAAU,YAAhB,SACI,cAAC,EAAD,CACIe,UAAahB,EAAMgB,UACnBF,gBAAmBd,EAAMc,gBACzBN,QAAWR,EAAMQ,YAGzB,sBAAMP,UAAU,SAAhB,SACI,cAAC,EAAD,CACIA,UAAY,eACZU,KAAK,YACLT,MAAO,OACPO,KAAM,sBACNL,gBAAmBJ,EAAMI,gBACzBI,QAAWR,EAAMQ,eAI7B,sBAAKP,UAAU,SAAf,UACI,sBAAMA,UAAU,UAAhB,SACI,cAAC,EAAD,CACIA,UAAU,aACVU,KAAK,UACLT,MAAM,OACNO,KAAM,2BACNH,cAAiBN,EAAMM,kBAG/B,sBAAML,UAAU,OAAhB,SACI,cAAC,EAAD,CACIA,UAAU,UACVU,KAAK,OACLT,MAAM,OACNO,KAAM,yBACNJ,WAAcL,EAAMK,WACpBG,QAAWR,EAAMQ,0BChDlC4C,G,MAxBA,WACX,OACI,iCACI,sBAAKnD,UAAY,eAAjB,UACI,mBAAGA,UAAY,oBAAoB6B,MAAM,wBAAwBuB,KAAK,oDAAmDP,OAAO,SAASQ,IAAI,aAA7I,SACI,mBAAGrD,UAAU,4BAEjB,mBAAGA,UAAY,oBAAoB6B,MAAM,2BAA2BuB,KAAK,0CAA0CP,OAAO,SAASQ,IAAI,aAAvI,SACI,mBAAGrD,UAAU,6BAEjB,mBAAGA,UAAY,oBAAoB6B,MAAM,oCAAoCuB,KAAK,mCAAmCP,OAAO,SAASQ,IAAI,aAAzI,SACI,mBAAGrD,UAAW,4BAElB,mBAAGA,UAAY,oBAAoB6B,MAAM,wBAAwBuB,KAAK,0DAA0DP,OAAO,SAASQ,IAAI,aAApJ,SACI,mBAAGrD,UAAU,mCAEjB,mBAAGA,UAAY,oBAAoB6B,MAAM,qBAAqBuB,KAAK,iCAAiCP,OAAO,SAASQ,IAAI,aAAxH,SACI,mBAAGrD,UAAU,wCCDlBsD,G,MAfA,WACX,OACI,gCACI,oBAAItD,UAAY,eAAhB,oBACA,qBAAIA,UAAY,eAAhB,UACI,qBAAIA,UAAY,mBAAhB,UAAmC,sBAAMA,UAAY,0BAArD,oBACA,qBAAIA,UAAY,mBAAhB,UAAmC,sBAAMA,UAAY,6BAArD,0BACA,qBAAIA,UAAY,mBAAhB,UAAmC,sBAAMA,UAAY,4BAArD,eACA,qBAAIA,UAAY,mBAAhB,UAAmC,sBAAMA,UAAY,2BAArD,iBACA,qBAAIA,UAAY,mBAAhB,UAAmC,sBAAMA,UAAY,6BAArD,iCCRVuD,G,MAAa,SAACC,EAAeC,GAE/B,IADA,IACSC,EAAI,EAAGA,EAAIF,EAAcG,OAAQD,IACtC,GAAIF,EAAcE,KAAOD,EACrB,OAAO,EAGf,OANc,IAwEHG,EA7DD,SAAC7D,GAGX,IAAI8D,EAAY,SACZC,EAAQ,OACRC,EAAW,OACXC,EAAY,WACZC,EAAc,WAoClB,OAlCIV,EAAW,CAAC,aAAa,YAAY,iBAAkBxD,EAAMgB,WAC7D8C,EAAY,SACLN,EAAW,CAAC,WAAW,YAAY,iBAAkBxD,EAAMgB,aAClE8C,EAAY,YAGZN,EAAW,CAAC,aAAa,WAAW,gBAAgB,iBAAkBxD,EAAMgB,WAC5E+C,EAAQ,OACD,cAAgB/D,EAAMgB,UAC7B+C,EAAQ,OACD,cAAgB/D,EAAMgB,YAC7B+C,EAAQ,YAGRP,EAAW,CAAC,WAAY,YAAa,aAAcxD,EAAMgB,WACzDgD,EAAW,aACJR,EAAW,CAAC,aAAa,iBAAkBxD,EAAMgB,WACxDgD,EAAW,OACJ,kBAAoBhE,EAAMgB,YACjCgD,EAAW,YAGXR,EAAW,CAAC,WAAY,YAAa,aAAcxD,EAAMgB,WACzDkD,EAAc,aACPV,EAAW,CAAC,aAAa,gBAAgB,iBAAkBxD,EAAMgB,aACxEkD,EAAc,YAGdV,EAAW,CAAC,WAAY,aAAcxD,EAAMgB,WAC5CiD,EAAY,aACLT,EAAW,CAAC,aAAa,gBAAgB,gBAAiB,aAAcxD,EAAMgB,aACrFiD,EAAY,YAIZ,sBAAKhE,UAAY,kBAAjB,UACI,oBAAIA,UAAY,cAAhB,mBACA,oBAAGA,UAAU,OAAb,uBAA8B,sBAAMA,UAAU,aAAhB,SAA8B6D,OAC5D,oBAAG7D,UAAU,OAAb,8BAAqC,sBAAMA,UAAU,aAAhB,SAA8B8D,OACnE,sBAAK9D,UAAU,4BAAf,UACI,mBAAGA,UAAU,6BAAb,8BACA,oBAAGA,UAAU,4BAAb,uBAAmD,sBAAMA,UAAU,aAAhB,SAA8B+D,OACjF,oBAAG/D,UAAU,4BAAb,0BAAsD,sBAAMA,UAAU,aAAhB,SAA8BiE,OACpF,oBAAGjE,UAAU,4BAAb,wBAAoD,sBAAMA,UAAU,aAAhB,SAA8BgE,OAC7D,eAApBjE,EAAMgB,UAA6B,mBAAGf,UAAU,6CAAb,qOAEsB,YCzE3D,MAA0B,uCCA1B,MAA0B,uCCmI1BkE,G,MA7HW,SAACnE,GACvB,OACI,sBAAKC,UAAY,gCAAjB,UACI,oBAAIA,UAAY,oBAAhB,iCACA,sBAAKA,UAAY,0BAA2B0B,MAA2B,eAApB3B,EAAMgB,UAA6B,CAACoD,QAAS,QAAU,KAA1G,UACI,oBAAGnE,UAAY,sBAAf,UACI,6CADJ,mkBAMA,mBAAGA,UAAY,4BAAf,2BACA,qBAAIA,UAAY,4BAAhB,UACI,oBAAIA,UAAU,aAAd,mDACA,oBAAIA,UAAU,cAAd,sDACA,oBAAIA,UAAU,aAAd,oFACA,oBAAIA,UAAU,cAAd,0HACA,oBAAIA,UAAU,aAAd,iFAGR,sBAAKA,UAAY,0BAA0B0B,MAA2B,aAApB3B,EAAMgB,UAA2B,CAACoD,QAAS,QAAU,KAAvG,UACI,oBAAGnE,UAAY,oBAAf,UACI,2CADJ,8JAEI,qBAAKoE,IAAOC,EAAYC,IAAI,aAAatE,UAAY,YAFzD,yFAKI,qBAAIA,UAAY,YAAhB,UACI,oGACA,8EAER,wUAIA,mBAAGA,UAAY,4BAAf,2BACA,qBAAIA,UAAY,4BAAhB,UACI,oBAAIA,UAAU,aAAd,wCACA,oBAAIA,UAAU,cAAd,kDACA,oBAAIA,UAAU,aAAd,wCACA,oBAAIA,UAAU,cAAd,4DAGR,sBAAKA,UAAY,0BAA0B0B,MAA2B,kBAApB3B,EAAMgB,UAAgC,CAACoD,QAAS,QAAU,KAA5G,UACI,oBAAGnE,UAAY,yBAAf,UACI,gDADJ,muBAOA,mBAAGA,UAAY,4BAAf,2BACA,qBAAIA,UAAY,4BAAhB,UACI,oBAAIA,UAAU,aAAd,0CACA,oBAAIA,UAAU,cAAd,uDACA,oBAAIA,UAAU,aAAd,0EACA,oBAAIA,UAAU,cAAd,wGACA,oBAAIA,UAAU,aAAd,6EACA,oBAAIA,UAAU,aAAd,oEAGR,sBAAKA,UAAY,0BAA0B0B,MAA2B,cAApB3B,EAAMgB,UAA4B,CAACoD,QAAS,QAAU,KAAxG,UACI,oBAAGnE,UAAY,qBAAf,UACI,4CADJ,wzBAOI,qBAAKoE,IAAKG,EAAWD,IAAI,oBAAoBtE,UAAY,aAP7D,mJAUA,mBAAGA,UAAY,4BAAf,2BACA,qBAAIA,UAAY,4BAAhB,UACI,oBAAIA,UAAU,aAAd,gCACA,oBAAIA,UAAU,cAAd,6EACA,oBAAIA,UAAU,aAAd,2BACI,+BACI,0DACA,iFACA,4FACA,oFACA,kFAER,oBAAIA,UAAU,cAAd,sDAGR,sBAAKA,UAAY,0BAA0B0B,MAA2B,cAApB3B,EAAMgB,UAA4B,CAACoD,QAAS,QAAU,KAAxG,UACI,oBAAGnE,UAAY,qBAAf,UACI,4CADJ,gmCASA,mBAAGA,UAAY,4BAAf,2BACA,qBAAIA,UAAY,4BAAhB,UACI,oBAAIA,UAAU,aAAd,gDACA,oBAAIA,UAAU,cAAd,0DACA,oBAAIA,UAAU,aAAd,oDACA,oBAAIA,UAAU,cAAd,uFACA,oBAAIA,UAAU,aAAd,2IACA,oBAAIA,UAAU,aAAd,mHACA,oBAAIA,UAAU,eAAd,mEAGR,sBAAKA,UAAY,0BAA0B0B,MAA2B,kBAApB3B,EAAMgB,UAAgC,CAACoD,QAAS,QAAU,KAA5G,UACI,oBAAGnE,UAAY,yBAAf,UACI,gDADJ,+cAMA,mBAAGA,UAAY,4BAAf,2BACA,qBAAIA,UAAY,4BAAhB,UACI,oBAAIA,UAAU,aAAd,wCACA,oBAAIA,UAAU,cAAd,6GACA,oBAAIA,UAAU,aAAd,kGCtELwE,G,MA7CC,SAACzE,GAEb,IAAI0E,EAAgB,OAwBpB,OAvBIC,OAAOC,WAAa,IAEhBF,EADoB,eAApB1E,EAAMgB,UACU,OACW,aAApBhB,EAAMgB,UACO,OACO,cAApBhB,EAAMgB,UACG,OACW,cAApBhB,EAAMgB,UACG,OACW,kBAApBhB,EAAMgB,UACG,OAEA,OAEO,eAApBhB,EAAMgB,WAA8B2D,OAAOC,WAAa,IAC/DF,EAAgB,QAEhBA,EAAgB,OACQ,eAApB1E,EAAMgB,YACN0D,EAAgB,SAKpB,sBAAKzE,UAAY,oBAAoB0B,MAAO3B,EAAM6E,QAAU,CAACT,QAAS,QAAS,KAA/E,UACI,qBAAKnE,UAAY,iCAAjB,SACI,cAAC,EAAD,MAEJ,qBAAKA,UAAY,gCAAgC0B,MAAS,CAACmD,UAAWJ,GAAtE,SACI,cAAC,EAAD,CACI1D,UAAahB,EAAMgB,cAG3B,qBAAKf,UAAY,sCAAsC0B,MAAS,CAACmD,UAAWJ,GAA5E,SACI,cAAC,EAAD,CACI1D,UAAahB,EAAMgB,mBC+DxB+D,G,MAxGA,SAAC/E,GAEZ,IAAIgF,EAAiB,EACrB,EAA0BzD,oBAAS,WAC/B0D,KAAK7D,IAAI,GAAI6D,KAAKC,KAAKP,OAAOC,WAAY5E,EAAMmF,OAAOvB,QAAQ,MADnE,mBAAOwB,EAAP,KAAcC,EAAd,KA4CA,OAvCAC,qBAAW,WAWP,GARIN,EADAL,OAAOC,YAAc,IACJ,EACVD,OAAOC,WAAa,IACV,EAEA,EAIjBD,OAAOC,YAAc,IAAK,CAK1BD,OAAOY,iBAAiB,UAJH,WACjBF,EAASJ,KAAK7D,IAAI,GAAI6D,KAAKC,KAAKP,OAAOC,WAAa5E,EAAMmF,OAAOvB,QAAUoB,OAM3EA,EADAL,OAAOC,YAAc,IACJ,EACVD,OAAOC,WAAa,IACV,EAEA,EAGrBS,EAASJ,KAAK7D,IAAI,GAAI6D,KAAKC,KAAKP,OAAOC,WAAa5E,EAAMmF,OAAOvB,QAAUoB,SAGvEhF,EAAMmF,OAAOvB,OAAS,GACtByB,EAASJ,KAAK7D,IAAI,EAAG6D,KAAKO,MAAMb,OAAOC,WAAa5E,EAAMmF,OAAOvB,QAAU,IAE3EyB,EAASJ,KAAK7D,IAAI,EAAG6D,KAAKO,MAAMb,OAAOC,WAAa5E,EAAMmF,OAAOvB,QAAU,MAIpF,CAAC5D,EAAMmF,OAAOvB,SAIb,sBAAK3D,UAAU,OAAf,UACI,cAAC,EAAD,CACIe,UAAahB,EAAMgB,UACnB6D,QAAW7E,EAAM6E,UAErB,uBAAM5E,UAAU,SAAhB,UACI,qBAAKA,UAAU,cAAc0B,MAAO,CAAC,MAAS,EAAG,OAAU,OAC1D3B,EAAMmF,OAAOM,KAAI,SAACC,EAAO/B,GAEtB,IAAIgC,EAIAA,EADD3F,EAAM4F,YAAYC,SAASlC,IAAM3D,EAAM4F,YACpB,iCACX5F,EAAM8F,SAAY9F,EAAM8F,QAAQ,KAAOnC,GAAK3D,EAAM8F,QAAQ,KAAOnC,EAGtD,6CAFA,0CAMlB3D,EAAM+F,YAAc/F,EAAM+F,aAAepC,IACzCgC,EAAkB,mCAIlB3F,EAAMgG,MAAShG,EAAMgG,KAAK,KAAOrC,GAAK3D,EAAMgG,KAAK,KAAOrC,IACxDgC,EAAkB,qCAItB,IAAMM,EAAgB,IAANP,EAAW1F,EAAMmF,OAAOvB,OACpChB,EAAS,EAET+B,OAAOC,YAAc,IACrBhC,EAAS,EACF+B,OAAOC,YAAc,MAC5BhC,EAAS,GAIb,IAAMsD,EAAS,CACX,MAASd,EACT,OAAUa,EACV,YAAerD,EACf,gBAAmB+C,GAIvB,OAAQ,qBAAc1F,UAAU,QAAQ0B,MAAOuE,GAA5BvC,cCnGjCqC,EAAO,SAACG,EAAGC,EAAGC,GAChB,IAAIC,EAAOD,EAAKF,GAChBE,EAAKF,GAAKE,EAAKD,GACfC,EAAKD,GAAKE,GAoBCC,EAjBI,SAACpB,GAIhB,IAHA,IAAMqB,EAAYrB,EAAOsB,QACnBC,EAAQ,GAEL/C,EAAI,EAAGA,EAAI6C,EAAU5C,OAAQD,IAAK,CACvC,IAAK,IAAIgD,EAAI,EAAGA,EAAIH,EAAU5C,OAAOD,EAAE,EAAGgD,IACtCD,EAAME,KAAK,CAACD,EAAGA,EAAE,EAAG,KAAM,OACtBH,EAAUG,GAAKH,EAAUG,EAAE,KAC3BX,EAAKW,EAAGA,EAAE,EAAGH,GACbE,EAAME,KAAK,CAACD,EAAGA,EAAE,EAAGH,EAAUC,QAAS,QAG/CC,EAAME,KAAK,CAAC,KAAM,KAAM,KAAMJ,EAAU5C,OAAOD,EAAE,IAErD,OAAO+C,GCpBLV,EAAO,SAACK,EAAMF,EAAGC,GACnB,IAAIE,EAAOD,EAAKF,GAChBE,EAAKF,GAAKE,EAAKD,GACfC,EAAKD,GAAKE,GA6BRO,EAAU,SAAVA,EAAWL,EAAWM,EAAWC,EAASL,GAC5C,IAAIM,EAAW,EAAIF,EAAY,EAC3BG,EAAYD,EAAW,EACvBE,EAASJ,EAETE,EAAWD,GAAWP,EAAUQ,GAAYR,EAAUU,KACtDA,EAASF,GAGTC,EAAYF,GAAWP,EAAUS,GAAaT,EAAUU,KACxDA,EAASD,GAGTC,IAAWJ,IACXd,EAAKQ,EAAWM,EAAWI,GAC3BR,EAAME,KAAK,CAACE,EAAWI,EAAQ,KAAM,OACrCR,EAAME,KAAK,CAACE,EAAWI,EAAQV,EAAUC,QAAS,OAClDI,EAAQL,EAAWU,EAAQH,EAASL,KA2B3BS,EAvBA,SAAChC,GACd,IAAMqB,EAAYrB,EAAOsB,QACnBC,EAAQ,IAhDG,SAACF,EAAWE,GAO7B,IAAK,IAAI/C,EAAIsB,KAAKO,MAAMgB,EAAU5C,OAAS,GAAID,GAAK,EAAGA,IACnDkD,EAAQL,EAAW7C,EAAG6C,EAAU5C,OAAQ8C,GA2C5CU,CAAaZ,EAAWE,GAGxB,IAAK,IAAI/C,EAAI6C,EAAU5C,OAAS,EAAGD,GAAK,EAAGA,IAEvC+C,EAAME,KAAK,CAAC,EAAGjD,EAAG,KAAM,OACxBqC,EAAKQ,EAAW,EAAG7C,GACnB+C,EAAME,KAAK,CAAC,EAAGjD,EAAG6C,EAAUC,QAAS,OACrCC,EAAME,KAAK,CAAC,KAAM,KAAM,KAAMjD,IAG9BkD,EAASL,EAAW,EAAG7C,EAAG+C,GAI9B,OADAA,EAAME,KAAK,CAAC,KAAM,KAAMJ,EAAUC,QAAS,OACpCC,GCzELV,EAAO,SAACG,EAAGC,EAAGC,GAChB,IAAIC,EAAOD,EAAKF,GAChBE,EAAKF,GAAKE,EAAKD,GACfC,EAAKD,GAAKE,GA8BCe,EA3BO,SAAClC,GAKnB,IAJA,IAAMqB,EAAYrB,EAAOsB,QACnBC,EAAQ,GAGL/C,EAAI,EAAGA,EAAI6C,EAAU5C,OAAQD,IAAK,CACvC,IAAIgD,EAAIhD,EAAI,EACR2D,EAAcd,EAAU7C,GAI5B,IADA+C,EAAME,KAAK,CAAC,KAAM,KAAMJ,EAAUC,QAAS,OACpCE,GAAI,GAAKH,EAAUG,GAAKW,GAC3BtB,EAAKW,EAAGA,EAAE,EAAGH,GACbE,EAAME,KAAK,CAACD,EAAGA,EAAE,EAAG,KAAM,OAC1BD,EAAME,KAAK,CAACD,EAAGA,EAAE,EAAGH,EAAUC,QAAS,OACvCE,IAEJD,EAAME,KAAK,CAACD,EAAGA,EAAE,EAAG,KAAM,OAI9B,IAAK,IAAIhD,EAAI,EAAGA,EAAI6C,EAAU5C,OAAQD,IAClC+C,EAAME,KAAK,CAAC,KAAM,KAAM,KAAMjD,IAElC,OAAO+C,GCWLa,EAAkB,SAAlBA,EAAmBpC,EAAQqC,EAAOC,EAAKf,GAEzC,KAAIc,GAASC,GAAb,CAGA,IAAMC,EAASzC,KAAKO,OAAOgC,EAAMC,GAAK,GAGtCF,EAAiBpC,EAAQqC,EAAOE,EAAQhB,GACxCa,EAAiBpC,EAAQuC,EAAO,EAAGD,EAAKf,GAtD5B,SAACvB,EAAQqC,EAAOE,EAAQD,EAAKf,GAUzC,IARA,IAAMJ,EAAO,GAITqB,EAAOH,EACPI,EAAOF,EAAO,EAGXC,GAAQD,GAAUE,GAAQH,GAC7Bf,EAAME,KAAK,CAACe,EAAMC,EAAM,KAAM,OAG1BzC,EAAOwC,IAASxC,EAAOyC,IACvBtB,EAAKM,KAAKzB,EAAOwC,IACjBA,MAEArB,EAAKM,KAAKzB,EAAOyC,IACjBA,KAKR,KAAOD,GAAQD,GACXhB,EAAME,KAAK,CAACe,EAAM,KAAMxC,EAAOsB,QAAS,OACxCH,EAAKM,KAAKzB,EAAOwC,IACjBA,IAIJ,KAAOC,GAAQH,GACXf,EAAME,KAAK,CAAC,KAAMgB,EAAMzC,EAAOsB,QAAS,OACxCH,EAAKM,KAAKzB,EAAOyC,IACjBA,IAIJ,IAAK,IAAIjE,EAAI6D,EAAO7D,GAAK8D,EAAK9D,IAC1BwB,EAAOxB,GAAK2C,EAAK3C,EAAI6D,GACrBd,EAAME,KAAK,CAACjD,EAAG,KAAMwB,EAAOsB,QAAS,OAezCoB,CAAS1C,EAAQqC,EAAOE,EAAQD,EAAKf,KAqB1BoB,EAfG,SAAC3C,GACf,IAAMqB,EAAYrB,EAAOsB,QACnBC,EAAQ,GAGda,EAAiBf,EAAUC,QAAS,EAAGD,EAAU5C,OAAO,EAAG8C,GAG3D,IAAK,IAAI/C,EAAI,EAAGA,EAAI6C,EAAU5C,OAAQD,IAClC+C,EAAME,KAAK,CAAC,KAAM,KAAM,KAAMjD,IAGlC,OAAO+C,GCrEFV,EAAO,SAACG,EAAGC,EAAGC,GACnB,IAAIC,EAAOD,EAAKF,GAChBE,EAAKF,GAAKE,EAAKD,GACfC,EAAKD,GAAKE,GAoBRyB,EAAkB,SAAlBA,EAAmBvB,EAAWgB,EAAOC,EAAKf,GAE5C,GAAIc,GAASC,EACLD,IAAUC,GACVf,EAAME,KAAM,CAAC,KAAM,KAAM,KAAMY,QAFvC,CAQA,IAAMQ,EAAQ/C,KAAKO,OAAOgC,EAAMC,GAAK,GAGrCzB,EAAMwB,EAAOQ,EAAOxB,GACpBE,EAAME,KAAM,CAACY,EAAOQ,EAAOxB,EAAUC,QAAS,OAG9C,IAAMwB,EAjCQ,SAACzB,EAAWgB,EAAOC,EAAKf,GACtC,IAAIuB,EAAYT,EACVQ,EAAQR,EACdd,EAAME,KAAK,CAAC,KAAM,KAAM,KAAM,KAAMqB,IACpC,IAAK,IAAItE,EAAIqE,EAAM,EAAGrE,GAAK8D,EAAK9D,IAC5B+C,EAAME,KAAK,CAACjD,EAAGqE,EAAO,KAAM,OACxBxB,EAAUwB,GAASxB,EAAU7C,KAC7BsE,IACAvB,EAAME,KAAM,CAAC,KAAM,KAAM,KAAM,KAAMqB,IACrCjC,EAAMiC,EAAWtE,EAAG6C,GACpBE,EAAME,KAAM,CAACqB,EAAWtE,EAAG6C,EAAUC,QAAS,KAAMwB,KAG5D,OAAOA,EAoBWC,CAAU1B,EAAWgB,EAAOC,EAAKf,GAGnDV,EAAMwB,EAAOS,EAAWzB,GACxBE,EAAME,KAAM,CAACY,EAAOS,EAAWzB,EAAUC,QAAS,KAAM,OACxDC,EAAME,KAAM,CAAC,KAAM,KAAM,KAAMqB,IAG3BT,GAASS,EAAU,GACnBF,EAAiBvB,EAAWgB,EAAOS,EAAU,EAAGvB,GAGhDuB,EAAU,GAAKR,GACfM,EAAiBvB,EAAWyB,EAAU,EAAGR,EAAKf,KAevCyB,EATG,SAAChD,GACf,IAAMqB,EAAYrB,EAAOsB,QACnBC,EAAQ,GAId,OAFAqB,EAAgBvB,EAAW,EAAGA,EAAU5C,OAAS,EAAG8C,GAE7CA,GCjELV,EAAO,SAACG,EAAGC,EAAGC,GAChB,IAAIC,EAAOD,EAAKF,GAChBE,EAAKF,GAAKE,EAAKD,GACfC,EAAKD,GAAKE,GAqBC8B,EAlBO,SAACjD,GAInB,IAHA,IAAMqB,EAAYrB,EAAOsB,QACnBC,EAAQ,GAEL/C,EAAI,EAAGA,EAAG6C,EAAU5C,OAAQD,IAAK,CACtC,IAAK,IAAIgD,EAAIhD,EAAGgD,EAAIH,EAAU5C,OAAQ+C,IAClCD,EAAME,KAAK,CAACjD,EAAGgD,EAAG,KAAM,OACpBH,EAAU7C,GAAK6C,EAAUG,KACzBX,EAAKrC,EAAGgD,EAAGH,GACXE,EAAME,KAAK,CAACjD,EAAGgD,EAAGH,EAAUC,QAAS,QAG7CC,EAAME,KAAK,CAAC,KAAM,KAAM,KAAMjD,IAGlC,OAAO+C,GC2LI2B,EArMH,WAKV,IAeMC,EAAiB,SAACC,GAGtB,IAFA,IAAIC,EAAMxF,OAAOuF,GACXE,EAAa,GACV9E,EAAI,EAAGA,EAAK6E,EAAI,EAAI7E,IAC3B8E,EAAW7B,KAAKjD,IAnBC,SAAC+E,GACpB,IAAK,IAAI/E,EAAI+E,EAAM9E,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAGvC,IAAIgD,EAAI1B,KAAKO,MAAMP,KAAK0D,UAAYhF,EAAI,IAEpC2C,EAAOoC,EAAM/E,GACjB+E,EAAM/E,GAAK+E,EAAM/B,GACjB+B,EAAM/B,GAAKL,GAafsC,CAAaH,GACbI,EAAUJ,GACVK,GAAW,GACXC,GAAY,GACZC,EAAe,KAOjB,EAAkCzH,oBAAS,iBAAK,gBAAhD,mBAAOP,EAAP,KAAkBiI,EAAlB,KACA,EAA4B1H,oBAAS,iBAAM,MAA3C,mBAAO4D,EAAP,KAAe0D,EAAf,KACA,EAA8BtH,oBAAS,iBAAM,MAA7C,mBAAOuE,EAAP,KAAgBoD,EAAhB,KACA,EAAwB3H,oBAAS,iBAAM,MAAvC,mBAAOyE,EAAP,KAAamD,EAAb,KACA,EAAsC5H,oBAAS,iBAAM,MAArD,mBAAOqE,EAAP,KAAoBoD,EAApB,KACA,EAA8BzH,oBAAS,kBAAM,KAA7C,mBAAOf,EAAP,KAAgBsI,EAAhB,KACA,EAAgCvH,oBAAS,kBAAM,KAA/C,mBAAO6H,EAAP,KAAiBL,EAAjB,KACA,EAA0BxH,oBAAS,kBAAM,OAAzC,mBAAOC,EAAP,KAAc6H,EAAd,KACA,EAAwB9H,oBAAS,kBAAM,MAAvC,mBAAOE,EAAP,KAAa6H,EAAb,KACA,EAAoC/H,oBAAS,kBAAM,QAAnD,mBAAOwE,EAAP,KAAmBwD,EAAnB,KACA,GAAsChI,oBAAS,kBAAM,KAArD,qBAAOiI,GAAP,MAAoBC,GAApB,MAGsB,IAAlBtE,EAAOvB,QACT0E,EAAe7G,GAiHjB,OAfD6D,qBAAU,WAWLgD,EAAe7G,KACjB,CAACA,IAID,sBAAKxB,UAAW,MAAM0B,MAAO,CACzByC,QAAS,OACTsF,UAAW,aACX5E,UAAW,OACXa,gBAAiB,WAJrB,UAME,cAAC,EAAD,CACE3E,UAAaA,EACbF,gBAtHkB,SAACwB,GACvB2G,EAAa3G,EAAMQ,OAAO/B,QAsHtBT,cAlHgB,WACpBmJ,IAAgBD,KAkHZpJ,gBA9GkB,WACtB4I,EAAe,IACfV,EAAe7G,GACfsH,GAAY,GACZD,GAAW,IA2GPzI,WArFa,WAEjB,IAAI+I,EAAJ,CAIA,IAAMO,EAAY,SAACC,IACjB,SAAUC,EAAKlG,GACXmG,YAAW,WAET,kBAAyCF,EAAOjG,GAAhD,GAAOgD,EAAP,KAAUoD,EAAV,KAAaC,EAAb,KAAkBC,EAAlB,KAA2BlE,EAA3B,KACAmD,EAAW,CAACvC,EAAGoD,IACfZ,EAAQ,IAGO,OAAZc,GACDjB,GAAe,SAACkB,GAAD,4BAETA,GAFS,CAEED,OAKhBD,IACDnB,EAAUmB,GACD,OAANrD,GAAmB,MAALoD,GACfZ,EAAQ,CAACxC,EAAGoD,OAIVpG,EAAIiG,EAAOhG,OACfiG,EAAKlG,GAELmF,GAAW,GAIT/C,GAAc,GAChBwD,EAAcxD,KAGfvE,GAlCP,CAmCG,IAIa,eAAdR,EAA6B2I,EAAUpD,EAAWpB,IAC/B,aAAdnE,EAA2B2I,EAAUxC,EAAShC,IAChC,kBAAdnE,EAAgC2I,EAAUtC,EAAclC,IAC1C,kBAAdnE,EAAgC2I,EAAUvB,EAAcjD,IAC1C,cAAdnE,EAA4B2I,EAAU7B,EAAU3C,IAClC,cAAdnE,GAA4B2I,EAAUxB,EAAUhD,IAEzD2D,GAAW,GACXC,GAAY,KAgCRvG,YAxGc,SAACzB,GACnBsI,EAAStI,IAwGL0B,WApGa,SAAC0H,GASlBb,EAPIa,EAAa,EACE,EACRA,EAAa,IACL,IAEAA,IA8Ff3J,QAAWA,EACXgB,MAASA,EACTC,KAAQA,IAEV,cAAC,EAAD,CACET,UAAaA,EACbmE,OAAUA,EACVW,QAAStF,GAAWsF,EACpBjB,QAAW2E,GACfxD,KAAMxF,GAAWwF,EACbJ,YAAeA,EACfG,WAAcA,IAEhB,cAAC,EAAD,QC1MNqE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7a6e5787.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nimport \"./GlowButton.scss\"\r\n\r\n// Possible parameters include the color and the title and the width and height\r\nconst GlowButton = (props) => {\r\n\r\n    const handleClick = () => {\r\n        if (props.className === \"randomizebtn\") {\r\n            return props.handleRandomize\r\n        } else if (props.className === \"sortbtn\") {\r\n            return props.handleSort\r\n        } else if (props.className === \"detailsbtn\") {\r\n            return props.handleDetails\r\n        }\r\n    }\r\n\r\n    return (\r\n        <span className=\"glowButton\">\r\n             <button \r\n                className={`myButton ${props.color}`} \r\n                onClick = {handleClick()}\r\n                disabled = {props.sorting}> \r\n                    <i className={props.icon} id=\"icon\"></i>{props.text}\r\n             </button>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default GlowButton ","import React from \"react\"\r\n\r\nimport \"./GlowSelectBox.scss\"\r\n\r\nconst GlowSelectBox = (props) => {\r\n\r\n    return (\r\n        <div className=\"custom-select\">\r\n            <select \r\n                className=\"selectAlgorithm\" \r\n                onChange= {props.handleAlgorithm} \r\n                value={props.algorithm}\r\n                disabled={props.sorting}>\r\n                    <option value='bubbleSort'>Bubble Sort</option>\r\n                    <option value='heapSort'>Heap Sort</option>\r\n                    <option value='insertionSort'>Insertion Sort</option>\r\n                    <option value='mergeSort'>Merge Sort</option>\r\n                    <option value='quickSort'>Quick Sort</option>\r\n                    <option value='selectionSort'>Selection Sort</option>\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GlowSelectBox\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Input from '@material-ui/core/Input';\r\nimport Speed from '@material-ui/icons/Speed';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport \"./CustomSlider.scss\"\r\n\r\nconst CustomSlider = (props) => {\r\n  const min = (props.className === \"speed\" ? 10 : 5)\r\n  const max = (props.className === \"speed\" ? 1000 : 100)\r\n  const [value, setValue] = React.useState(props.className === \"speed\" ? props.speed : props.size);\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    props.className === \"speed\" ? props.handleSpeed(newValue) : props.handleSize(newValue)\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    const val = event.target.value\r\n    // ensure value is number\r\n    if (!isNaN(val)) {\r\n      props.className === \"speed\" ? props.handleSpeed(val) : props.handleSize(val)\r\n      setValue(Number(val))     \r\n    }\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    if (value < min) {\r\n      props.className === \"speed\" ? props.handleSpeed(min) : props.handleSize(min)\r\n      setValue(min);\r\n    } else if (value > max) {\r\n      props.className === \"speed\" ? props.handleSpeed(max) : props.handleSize(max)\r\n      setValue(max);\r\n    }\r\n  };\r\n\r\n  // change symbol color if disabled \r\n  let sliderColor\r\n  if (props.sorting === true) {\r\n    sliderColor = 'grey'\r\n  } else {\r\n    sliderColor = '#00c2fc'\r\n  }\r\n\r\n  // chooseing between the two symbols \r\n  let symbol \r\n  if (props.className === \"speed\") {\r\n    symbol = (<Speed style={{color: sliderColor}}/>)\r\n  } else if (props.className === \"size\") {\r\n    symbol = <i className=\"fas fa-ruler\" style={{color: sliderColor}}/>\r\n  }\r\n\r\n  const title = () => {\r\n    var sentence;\r\n    if (props.className === \"speed\") {\r\n      sentence = \"Swap Speed - \" + props.speed + \" ms\"\r\n    } else if (props.className === \"size\") {\r\n      sentence = \"Array Size - \" + props.size + \" Blocks\"\r\n    }\r\n    return sentence \r\n  }\r\n\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <Typography style = {{color: sliderColor}}> {title()} </Typography>\r\n      <Grid container spacing={1} alignItems=\"center\">\r\n        <Grid item>\r\n        {symbol}\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Slider\r\n            value={typeof value === 'number' ? value : 0}\r\n            onChange={handleSliderChange}\r\n            aria-labelledby=\"input-slider\"\r\n            max = {props.max}\r\n            min = {props.min}\r\n            disabled = {props.sorting}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Input\r\n            value={value}\r\n            margin=\"dense\"\r\n            onChange={handleInputChange}\r\n            onBlur={handleBlur}\r\n            disabled = {props.sorting}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomSlider","import React from \"react\"\r\nimport GlowButton from \"../GlowButton/GlowButton\"\r\nimport GlowSelectBox from \"../GlowSelectBox/GlowSelectBox\"\r\nimport CustomSlider from \"../CustomSlider/CustomSlider\"\r\n\r\n// Styling\r\nimport \"./Navbar.scss\"\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <nav> \r\n            <div className=\"title\">\r\n                <h1 className=\"sorting-visualizer\"><u>Sorting Visualizer</u></h1>\r\n            </div>\r\n            <div className=\"changes\">\r\n                <div className=\"slides\">\r\n                    <div className = \"speedSlider\">\r\n                        <CustomSlider\r\n                            className = \"speed\"\r\n                            sliderVal = {props.speed}\r\n                            min = {10}\r\n                            max = {1000}\r\n                            speed = {props.speed}\r\n                            handleSpeed = {props.handleSpeed}\r\n                            sorting = {props.sorting}\r\n                            />\r\n                    </div>\r\n                    <div className = \"sizeSlider\">\r\n                        <CustomSlider\r\n                            className = \"size\"\r\n                            sliderVal = {props.size}\r\n                            min = {5}\r\n                            max = {100}\r\n                            size = {props.size}\r\n                            handleSize = {props.handleSize}\r\n                            sorting = {props.sorting}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className = \"buttons\">\r\n                    <div className=\"top\">\r\n                        <span className=\"algorithm\">\r\n                            <GlowSelectBox \r\n                                algorithm = {props.algorithm}\r\n                                handleAlgorithm = {props.handleAlgorithm}\r\n                                sorting = {props.sorting}\r\n                            />\r\n                        </span>\r\n                        <span className=\"random\">\r\n                            <GlowButton \r\n                                className = \"randomizebtn\"\r\n                                text=\"Randomize\" \r\n                                color =\"aqua\" \r\n                                icon =\"fas fa-random fa-1x\"\r\n                                handleRandomize = {props.handleRandomize}\r\n                                sorting = {props.sorting}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"bottom\">\r\n                        <span className=\"details\">\r\n                            <GlowButton \r\n                                className=\"detailsbtn\"\r\n                                text=\"Details\" \r\n                                color=\"aqua\" \r\n                                icon =\"fas fa-info-circle fa-1x\"\r\n                                handleDetails = {props.handleDetails}\r\n                            />\r\n                        </span>\r\n                        <span className=\"sort\">\r\n                            <GlowButton \r\n                                className=\"sortbtn\"\r\n                                text=\"Sort\" \r\n                                color=\"lime\" \r\n                                icon =\"fas fa-power-off fa-1x\"\r\n                                handleSort = {props.handleSort}\r\n                                sorting = {props.sorting}\r\n                            />\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar \r\n\r\n","import React from \"react\"\r\n\r\nimport \"./Footer.scss\"\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div className = \"social-media\">\r\n                <a className = \"social-media-icon\" title=\"LinkedIn - Wilson Liu\" href=\"https://www.linkedin.com/in/wilson-liu-ab285b203/\"target=\"_blank\" rel=\"noreferrer\">\r\n                    <i className=\"fab fa-linkedin fa-3x\"></i> \r\n                </a>\r\n                <a className = \"social-media-icon\" title=\"Instagram - liu_wilson15\" href=\"https://www.instagram.com/liu_wilson15/\" target=\"_blank\" rel=\"noreferrer\">\r\n                    <i className=\"fab fa-instagram fa-3x\"></i>\r\n                </a>\r\n                <a className = \"social-media-icon\" title=\"Email - wilsonliu151413@gmail.com\" href=\"mailto:wilsonliu151413@gmail.com\" target=\"_blank\" rel=\"noreferrer\">\r\n                    <i className =\"far fa-envelope fa-3x\"></i>\r\n                </a>\r\n                <a className = \"social-media-icon\" title=\"Facebook - Wilson Liu\" href=\"https://www.facebook.com/profile.php?id=100008212365379\" target=\"_blank\" rel=\"noreferrer\">\r\n                    <i className=\"fab fa-facebook-square fa-3x\"></i> \r\n                </a>\r\n                <a className = \"social-media-icon\" title=\"GitHub - WilsonLiu\" href=\"https://github.com/WilsonLiu15\" target=\"_blank\" rel=\"noreferrer\">\r\n                    <i className=\"fab fa-github-square fa-3x\"></i>\r\n                </a>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from \"react\"\r\n\r\nimport \"./Legend.scss\"\r\n\r\n\r\nconst Legend = () => {\r\n    return (\r\n        <div>\r\n            <h1 className = \"legend-title\">Legend</h1>\r\n            <ul className = \"legend-Items\">\r\n                <li className = \"legend-Item-text\"><span className = \"legend-Item-color red\"></span> - Pivot Index</li>\r\n                <li className = \"legend-Item-text\"><span className = \"legend-Item-color yellow\"></span> - Compared Elements</li>\r\n                <li className = \"legend-Item-text\"><span className = \"legend-Item-color green\"></span> - Sorted</li>\r\n                <li className = \"legend-Item-text\"><span className = \"legend-Item-color blue\"></span> - Unsorted</li>\r\n                <li className = \"legend-Item-text\"><span className = \"legend-Item-color purple\"></span> - Swapped Elements</li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Legend","import React from \"react\" \r\n\r\nimport \"./Stats.scss\"\r\n\r\n// function that allows you to compare multiple values instead of using\r\n// multiple || \r\nconst oneIsEqual = (beingCompared, expected) => {\r\n    let isEqual = false;\r\n    for (let i = 0; i < beingCompared.length; i++) {\r\n        if (beingCompared[i] === expected) {\r\n            return true;\r\n        }\r\n    }\r\n    return isEqual\r\n}\r\n\r\n\r\n\r\nconst Stats = (props) => {\r\n    //----------------------------Determining the values for the stats based on the algorithm----------------------------------------------------//\r\n    // value variables (default: bubble sort)\r\n    let stability = \"Stable\"\r\n    let space = \"O(1)\"\r\n    let timeBest = \"O(n)\"\r\n    let timeWorst = \"O(n²)\"\r\n    let timeAverage = \"O(n²)\"\r\n\r\n    if (oneIsEqual([\"bubbleSort\",\"mergeSort\",\"insertionSort\"], props.algorithm)) {\r\n        stability = \"Stable\"\r\n    } else if (oneIsEqual([\"heapSort\",\"quickSort\",\"selectionSort\"], props.algorithm)) {\r\n        stability = \"Unstable\"\r\n    }\r\n    \r\n    if (oneIsEqual([\"bubbleSort\",\"heapSort\",\"insertionSort\",\"selectionSort\"], props.algorithm)) {\r\n        space = \"O(1)\"\r\n    } else if (\"mergeSort\" === props.algorithm) {\r\n        space = \"O(n)\"\r\n    } else if (\"quickSort\" === props.algorithm) {\r\n        space = \"O(log n)\"\r\n    }\r\n\r\n    if (oneIsEqual([\"heapSort\", \"quickSort\", \"mergeSort\"], props.algorithm)) {\r\n        timeBest = \"O(n log n)\"\r\n    } else if (oneIsEqual([\"bubbleSort\",\"insertionSort\"], props.algorithm)) {\r\n        timeBest = \"O(n)\"\r\n    } else if (\"selectionSort\" === props.algorithm) {\r\n        timeBest = \"O(n²)\"\r\n    }\r\n\r\n    if (oneIsEqual([\"heapSort\", \"quickSort\", \"mergeSort\"], props.algorithm)) {\r\n        timeAverage = \"O(n log n)\"\r\n    } else if (oneIsEqual([\"bubbleSort\",\"insertionSort\",\"selectionSort\"], props.algorithm)) {\r\n        timeAverage = \"O(n²)\"\r\n    }\r\n\r\n    if (oneIsEqual([\"heapSort\", \"mergeSort\"], props.algorithm)) {\r\n        timeWorst = \"O(n log n)\"\r\n    } else if (oneIsEqual([\"bubbleSort\",\"insertionSort\",\"selectionSort\", \"quickSort\"], props.algorithm)) {\r\n        timeWorst = \"O(n²)\"\r\n    }\r\n\r\n    return (\r\n        <div className = \"stats-container\">\r\n            <h1 className = \"stats-title\">Stats</h1>\r\n            <p className=\"stat\">Stability:<span className=\"stat-value\">{stability}</span></p>\r\n            <p className=\"stat\">Space Complexity:<span className=\"stat-value\">{space}</span></p>\r\n            <div className=\"stat stat-time-complexity\">\r\n                <p className=\"stat-time-complexity-title\">Time Complexity:</p>\r\n                <p className=\"stat-time-complexity-case\">Best Case:<span className=\"stat-value\">{timeBest}</span></p>\r\n                <p className=\"stat-time-complexity-case\">Average Case:<span className=\"stat-value\">{timeAverage}</span></p>\r\n                <p className=\"stat-time-complexity-case\">Worst Case:<span className=\"stat-value\">{timeWorst}</span></p>\r\n                {props.algorithm === \"bubbleSort\" ? <p className=\"stat-time-complexity-case bubble-sort-note\">Note: The optimal version of bubble sort was \r\n                not implemented in this application. Thus a run time of O(n) is not possible with the currently implemented algorithm. \r\n                To do so the use of a boolean variable is required.</p> : null}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Stats","export default __webpack_public_path__ + \"static/media/binaryheap.0556bbe2.PNG\";","export default __webpack_public_path__ + \"static/media/mergesort.014086bf.webp\";","import React from \"react\"\r\nimport binaryHeap from \"./binaryheap.PNG\"\r\nimport mergesort from \"./mergesort.webp\"\r\n\r\nimport \"./AlgorithmExplained.scss\" \r\n\r\nconst AlgorithExplained = (props) => {\r\n    return (\r\n        <div className = \"algorithm-explained-container\">\r\n            <h1 className = \"description-title\">Algorithm Explained</h1>\r\n            <div className = \"details-steps-container\"  style={props.algorithm !== \"bubbleSort\" ? {display: \"none\"} : null}>\r\n                <p className = \"details-bubble-sort\">\r\n                    <b>Bubble Sort </b>is a simple algorithm that is based of swaping the largest value to the end of the array. Since each incrementation only moves one element \r\n                    (ie the largest element) to the end of the array that means that there needs to be a total of [list.length() - 1] iterations. Since we know that each iteration \r\n                    brings the largest element to the end of the list, we can make this algorithm a little more efficent by making the end point the last element that was sorted \r\n                    that is if the end of the list was j = [lengthOfList - 1] then each iteration through j would need to decrease by 1.            \r\n                </p>\r\n                <p className = \"details-description-title\">General Steps</p>\r\n                <ol className = \"details-description-steps\">\r\n                    <li className=\"first-step\">Start at left-most element (ie i = 0)</li>\r\n                    <li className=\"second-step\">Compare adjacent elements (ie i and i+1)</li>\r\n                    <li className=\"third-step\">If first element is greater than second element then swap the elements</li>\r\n                    <li className=\"fourth-step\">Increment i by 1 and repeat steps 1 to 4 until you reach the end of the list, minus the sorted blocks if any</li>\r\n                    <li className=\"fifth-step\">Repeat steps 1 to 4, each time reducing the end position by 1</li>\r\n                </ol>\r\n            </div>\r\n            <div className = \"details-steps-container\" style={props.algorithm !== \"heapSort\" ? {display: \"none\"} : null}>\r\n                <p className = \"details-heap-sort\">\r\n                    <b>Heap Sort </b> is an algorithm that makes use of a heap, so before I explain how it works I have attached a picture of a heap/binary tree for those who need a refresher.\r\n                    <img src = {binaryHeap} alt=\"heap Image\" className = \"heapImg\"/>\r\n                    In addition to knowing what a heap is, you will also need to know some terminology:\r\n                </p>\r\n                    <ul className = \"heapTerms\">\r\n                        <li>Max Heap: heap where the child nodes are less than the parent node</li>\r\n                        <li>Root: First (top) node in the entire heap</li>\r\n                    </ul>\r\n                <p>\r\n                    Note: Heap Sort is an algorithm that is a little different from the other algorithms in this application. That is, in order to understand how \r\n                    it works requires the visual aid of a binary tree. Thus you will not be able to follow along to how it is sorting, but you will be able to see the speed.\r\n                </p>\r\n                <p className = \"details-description-title\">General Steps</p>\r\n                <ol className = \"details-description-steps\">\r\n                    <li className=\"first-step\">Turn array into a max heap</li>\r\n                    <li className=\"second-step\">Swap the root with the final element</li>\r\n                    <li className=\"third-step\">Decrease array length by 1</li>\r\n                    <li className=\"fourth-step\">Repeat Steps 1 to 3 until 1 node is left</li>\r\n                </ol>\r\n            </div>\r\n            <div className = \"details-steps-container\" style={props.algorithm !== \"insertionSort\" ? {display: \"none\"} : null}>\r\n                <p className = \"details-insertion-sort\">\r\n                    <b>Insertion Sort </b>is an algorithm that is based on how you may sort a pile of cards. You would pick up one card and know it to be sorted, and then you would pick up \r\n                    a second card and place it either in front or behind the first card. Each time you add a new card you need to iterate through the sorted stack until you find the \r\n                    correct spot. The concept is replicated with Insertion Sort. That is, you start at the left most element and then iterate to the end of the array, each time adding the \r\n                    next element. In order to place the new element (letting the elements position be i) in the correct spot you need to compare i and i-1, and if the i-1 element is greater than \r\n                    i then you know you need to move further back into the array (or stack of cards).\r\n                </p>\r\n                <p className = \"details-description-title\">General Steps</p>\r\n                <ol className = \"details-description-steps\">\r\n                    <li className=\"first-step\">Start with left-most element</li>\r\n                    <li className=\"second-step\">Add next element into array being sorting</li>\r\n                    <li className=\"third-step\">Compare current element (ie i) and previous element (ie i-1)</li>\r\n                    <li className=\"fourth-step\">If previous element is greater than current element then swap elements and decrease i by 1</li>\r\n                    <li className=\"fifth-step\">When previous element is smaller than current element then stop</li>\r\n                    <li className=\"sixth-step\">Repeat step 2 to 5 until end of array is reached</li>\r\n                </ol>\r\n            </div>\r\n            <div className = \"details-steps-container\" style={props.algorithm !== \"mergeSort\" ? {display: \"none\"} : null}>\r\n                <p className = \"details-merge-sort\">\r\n                    <b>Merge Sort </b>is a divide and conquer sorting algorithm. It makes use of recursion by repeatedly splitting the array into 2 halves (left half and right half)\r\n                    until the list is comprised of single elements. After, it will go back and recombine each half into sorted order. In order to combine the lists back into sorted order\r\n                    it requires a temporary array. Merge Sort will iterate through the arrays being combined, with an index at the start of both arrays. As each element is being compared \r\n                    it will take the smaller element and copy it into to temporary array. Then the index for the smaller elements array will increase by 1. If one of the arrays is \r\n                    completely sorted then it will simply add the remaining array onto the temporary array. Once the temporary array is filled it will replace the appropriate spots in\r\n                    the original array. \r\n                    <img src={mergesort} alt=\"mergesort example\" className = \"mergeImg\"/> \r\n                    Note: Since splitting a list in half doesn't change the list itself, the visual component will only show the list being merged back together. \r\n                </p>\r\n                <p className = \"details-description-title\">General Steps</p>\r\n                <ol className = \"details-description-steps\">\r\n                    <li className=\"first-step\">Split List in half</li>\r\n                    <li className=\"second-step\">Repeat step 1 with subsequent lists until lists become length 1</li>\r\n                    <li className=\"third-step\">Combine lists</li>\r\n                        <ol>\r\n                            <li>Create a temporary array</li>\r\n                            <li>Start at left side of both lists being compared</li>\r\n                            <li>Compare values and copy smaller array into temporary array</li>\r\n                            <li>Increment index of array with smaller element by 1</li>\r\n                            <li>Repeat sub-steps 1 to 4 until array is sorted</li>\r\n                        </ol>\r\n                    <li className=\"fourth-step\">Repeat step 3 until list is sorted</li>\r\n                </ol>\r\n            </div>\r\n            <div className = \"details-steps-container\" style={props.algorithm !== \"quickSort\" ? {display: \"none\"} : null}>\r\n                <p className = \"details-quick-sort\">\r\n                    <b>Quick Sort </b>is a divide and conquer algorithm that picks a random element, called the pivot, and then places it off to the side. Once the pivot has \r\n                    been determined, the algorithm needs to determine where the pivot needs to go. In order to find this spot, an index (let's use j) is placed where the first element \r\n                    occurs and a second index (let's use i) is also placed at that spot. As i iterates through the current list, at each element the i element and the pivot will be compared. If the \r\n                    pivot is greater than the i element, the j element and the i element will swap. At this point we know that anything to the left of the j element must be smaller than the pivot.\r\n                    This means that the position of j must increment by 1 so that there is at least 1 value less than the pivot to the left of itself. The algorithm will continue this procedure to \r\n                    the end until we have found the pivots spot and can move it there. We are then left with two sides where the values are either less than the pivot or greater than the pivot.\r\n                    We can simply use recursion to perform what we just did with the remaining two halves and subsequent halves. \r\n                </p>\r\n                <p className = \"details-description-title\">General Steps</p>\r\n                <ol className = \"details-description-steps\">\r\n                    <li className=\"first-step\">Choose a random value as the pivot</li>\r\n                    <li className=\"second-step\">Swap the first element and the pivot element</li>\r\n                    <li className=\"third-step\">Create a index at the element position</li>\r\n                    <li className=\"fourth-step\">Iterate through the array comparing the pivot to the other element values</li>\r\n                    <li className=\"fifth-step\">If the other element values are less than the pivot then swap them with the index position and increment the index value by 1</li>\r\n                    <li className=\"sixth-step\">Once end of array has been met, replace pivot with index value leaving you with a left and right half</li>\r\n                    <li className=\"seventh-step\">Repeat steps 1 to 6 for the left and right half</li>\r\n                </ol>\r\n            </div>\r\n            <div className = \"details-steps-container\" style={props.algorithm !== \"selectionSort\" ? {display: \"none\"} : null}>\r\n                <p className = \"details-selection-sort\">\r\n                    <b>Selection Sort </b>is a fairly simple algorithm. The main idea of the algorithm is to pick and choose. That is, you start at the left-most element \r\n                    and iterate through the list. As you iterate through the list, compare each element with the left-most element and swap them if the element is smaller\r\n                    than the left-most element. At the end of each iteration, the left most element will be in the correct spot. Then each time this is repeated just increase \r\n                    where you start by one. \r\n                </p>\r\n                <p className = \"details-description-title\">General Steps</p>\r\n                <ol className = \"details-description-steps\">\r\n                    <li className=\"first-step\">Start at left most element</li>\r\n                    <li className=\"second-step\">Iterate to the end of the list, replacing the left most element with a element if it is smaller</li>\r\n                    <li className=\"third-step\">Repeat steps 1 and 2, each time increasing the starting the position by 1</li>\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlgorithExplained","import React from \"react\"\r\n\r\n// React Components \r\nimport Legend from \"../Legend/Legend\"\r\nimport Stats from \"../Stats/Stats\"\r\nimport AlgorithmExplained from \"../AlgorithmExplained/AlgorithmExplained\"\r\n\r\nimport \"./Details.scss\"\r\n\r\nconst Details = (props) => {\r\n    // Editing the length of columns based on screen size\r\n    let detailsHeight = \"20em\"\r\n    if (window.innerWidth > 900) {\r\n        if (props.algorithm === \"bubbleSort\") {\r\n            detailsHeight = \"33em\"\r\n        } else if (props.algorithm === \"heapSort\") {\r\n                detailsHeight = \"40em\"\r\n        } else if (props.algorithm === \"mergeSort\") {\r\n            detailsHeight = \"62em\"\r\n        } else if (props.algorithm === \"quickSort\") {\r\n            detailsHeight = \"44em\"\r\n        } else if (props.algorithm === \"insertionSort\") {\r\n            detailsHeight = \"33em\"\r\n        } else {\r\n            detailsHeight = \"23em\"\r\n        }\r\n    } else if (props.algorithm === \"bubbleSort\" && window.innerWidth > 500) {\r\n        detailsHeight = \"25em\"\r\n    } else {\r\n        detailsHeight = \"11em\"\r\n        if (props.algorithm === \"bubbleSort\") {\r\n            detailsHeight = \"16em\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = \"details-container\" style={props.details ? {display: \"none\"}: null}>\r\n            <div className = \"details-content details-legend\" >\r\n                <Legend />\r\n            </div>\r\n            <div className = \"details-content details-stats\" style = {{minHeight: detailsHeight}}>\r\n                <Stats \r\n                    algorithm = {props.algorithm}\r\n                />\r\n            </div>\r\n            <div className = \"details-content details-description\" style = {{minHeight: detailsHeight}}>\r\n                <AlgorithmExplained \r\n                    algorithm = {props.algorithm}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Details","import React, {useState, useEffect} from \"react\"\r\nimport Details from \"../Details/Details\"\r\n\r\n// Styling\r\nimport \"./Blocks.scss\"\r\n\r\nconst Blocks = (props) => {\r\n    // Variables \r\n    let marginSubtract = 8;                                // value that is subtracted from the width equation in order to obtain the desired margin        \r\n    const [width, setWidth] = useState(() => {             // state to store what the width of each block is \r\n        Math.min(20, Math.ceil(window.innerWidth /props.blocks.length)-5)\r\n    })    \r\n\r\n    // updates the blocks when screen changes \r\n    useEffect (() => {\r\n        // changing the size of the margin to mantain a visually appealing ratio\r\n        if (window.innerWidth <= 800) {\r\n            marginSubtract = 5\r\n        } else if (window.innerWidth < 1000) {\r\n            marginSubtract = 7\r\n        } else {\r\n            marginSubtract = 8\r\n        }\r\n\r\n        // changing the width when screen change is detected \r\n        if (window.innerWidth >= 500) {\r\n            const handleResize = () => {\r\n                setWidth(Math.min(20, Math.ceil(window.innerWidth / props.blocks.length) - marginSubtract))\r\n            }\r\n    \r\n            window.addEventListener('resize', handleResize)\r\n           \r\n            if (window.innerWidth <= 800) {\r\n                marginSubtract = 5\r\n            } else if (window.innerWidth < 1000) {\r\n                marginSubtract = 7\r\n            } else {\r\n                marginSubtract = 8\r\n            }\r\n            \r\n            setWidth(Math.min(20, Math.ceil(window.innerWidth / props.blocks.length) - marginSubtract))\r\n        } else {\r\n            // 4 and 2 allow for bigger blocks without any overflow\r\n            if (props.blocks.length > 60) {\r\n                setWidth(Math.min(2, Math.floor(window.innerWidth / props.blocks.length) - 1))\r\n            } else {\r\n                setWidth(Math.min(4, Math.floor(window.innerWidth / props.blocks.length) - 1))\r\n            }\r\n        }\r\n\r\n    }, [props.blocks.length])\r\n\r\n    // JSX for creating the blocks and any required containers for positioning \r\n    return (\r\n        <div className=\"back\">\r\n            <Details \r\n                algorithm = {props.algorithm}\r\n                details = {props.details}\r\n            />\r\n            <main className=\"blocks\">\r\n                <div className='blockHeight' style={{\"width\": 1, \"height\": 500}}></div>\r\n                {props.blocks.map((block, i) => {\r\n                    // changing the color of the block if needed \r\n                    let backgroundColor\r\n                    \r\n                    // color yellow for values beign compared and return color to default when finished \r\n                    if(props.sortedValue.includes(i) && props.sortedValue){\r\n                        backgroundColor = \"linear-gradient(lime, yellow)\"\r\n                    } else if (props.compare && (props.compare[0] === i || props.compare[1] === i)) {\r\n                        backgroundColor = \"linear-gradient(to top, orange, yellow)\"\r\n                    } else {\r\n                        backgroundColor = \"linear-gradient(#00FFD1, #00A3FF, #0066FF)\"\r\n                    }\r\n\r\n                    // special case for quick sorts index \r\n                    if (props.quickIndex && props.quickIndex === i) { \r\n                        backgroundColor = \"linear-gradient(red,  #fe8c00)\"\r\n                    }\r\n\r\n                    // overriding existing color in order to swap \r\n                    if (props.swap && (props.swap[0] === i || props.swap[1] === i)) {\r\n                        backgroundColor = \"linear-gradient(magenta, #9921e8)\"\r\n                    } \r\n\r\n                    // calculating the height of the current block based on the number of total blocks\r\n                    const height = (block*500)/props.blocks.length\r\n                    let margin = 4\r\n\r\n                    if (window.innerWidth <= 500) {\r\n                        margin = 1\r\n                    } else if (window.innerWidth <= 1000) {\r\n                        margin = 2;\r\n                    } \r\n\r\n                    // Inline styling for block, needed since width and height of blocks changes \r\n                    const styles = {\r\n                        \"width\": width,\r\n                        \"height\": height,\r\n                        \"marginRight\": margin,\r\n                        \"backgroundImage\": backgroundColor\r\n                    }           \r\n                    \r\n                    // Each block element \r\n                    return (<div key ={i} className='block' style={styles}></div>)\r\n                })}\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Blocks","// function to swap 2 values \r\n/* a is the index of the first element\r\n   b is the index of the second element \r\n   list the the array of the element */\r\nconst swap = (a, b, list) => {\r\n    let temp = list[a]\r\n    list[a] = list[b]\r\n    list[b] = temp\r\n}\r\n\r\nconst bubbleSort = (blocks) => {\r\n    const dupBlocks = blocks.slice()   // copy of the blocks to be manipulated \r\n    const order = []                   // array that stores an array of what blocks are manipulated at each step\r\n\r\n    for (let i = 0; i < dupBlocks.length; i++) {             // iterate through list i times, once for each item \r\n        for (let j = 0; j < dupBlocks.length-i-1; j++) {     // each iteration through list decrease by number of items already sorted \r\n            order.push([j, j+1, null, null])\r\n            if (dupBlocks[j] > dupBlocks[j+1]) {             // swap adjacent items if first item is larger \r\n                swap(j, j+1, dupBlocks)\r\n                order.push([j, j+1, dupBlocks.slice(), null])\r\n            }\r\n        }\r\n        order.push([null, null, null, dupBlocks.length-i-1])\r\n    }\r\n    return order \r\n}\r\n\r\nexport default bubbleSort","// function to swap 2 values \r\n/* a is the index of the first element\r\n   b is the index of the second element \r\n   list the the array of the element */\r\nconst swap = (list, a, b) => {\r\n    let temp = list[a]\r\n    list[a] = list[b]\r\n    list[b] = temp\r\n}\r\n\r\n// builds a max heap, which is a type of tree where the children nodes are less than the parent node\r\nconst buildMaxHeap = (dupBlocks, order) => {\r\n    // iterate through the nodes that have children \r\n    // NOTE: we start at Math.floor(n/2), where n is the length of the array \r\n    //       this value provides us with the last node that could have children, \r\n    //       not the last node in the array\r\n    // Note: when dealing with heaps, array indexes, by convention, start at 1 and thus why the length \r\n    //       doesn't have 1 subtracted from it\r\n    for (let i = Math.floor(dupBlocks.length / 2); i >= 0; i--) {\r\n        heapify(dupBlocks, i, dupBlocks.length, order)\r\n    }\r\n}\r\n\r\n// --------------------------------------Heapify Explained----------------------------------//\r\n// Given a speciifc node heapify swaps provided node and subsequent nodes until all nodes under \r\n// the provided node are in a max heap, for out purposes \r\n//                  10\r\n//            12        38\r\n//         3    9     39    8\r\n//       1  2  4 5  40 37  7  6\r\n// If the value 38 was substituted in then the 39, 40 and 38 would be manipulated until they were   \r\n// a max heap. The rs (ie 8, 7, 6) is already a max heap thus the new tree would be \r\n//                  10\r\n//            12        40\r\n//         3    9     39    8\r\n//       1  2  4 5  38 37  7  6\r\nconst heapify = (dupBlocks, startNode, endNode, order) => {\r\n    let leftNode = 2 * startNode + 1;\r\n    let rightNode = leftNode + 1;\r\n    let maxVal = startNode\r\n\r\n    if (leftNode < endNode && dupBlocks[leftNode] > dupBlocks[maxVal]) {\r\n        maxVal = leftNode;\r\n    }\r\n\r\n    if (rightNode < endNode && dupBlocks[rightNode] > dupBlocks[maxVal])     {\r\n        maxVal = rightNode;\r\n    }\r\n\r\n    if (maxVal !== startNode) {\r\n        swap(dupBlocks, startNode, maxVal)\r\n        order.push([startNode, maxVal, null, null])\r\n        order.push([startNode, maxVal, dupBlocks.slice(), null])\r\n        heapify(dupBlocks, maxVal, endNode, order)\r\n    }\r\n}\r\n\r\nconst heapSort = (blocks) => {\r\n    const dupBlocks = blocks.slice()   // copy of the blocks to be manipulated \r\n    const order = []                   // array that stores an array of what blocks are manipulated at each step\r\n\r\n    // build the max heap \r\n    buildMaxHeap(dupBlocks, order)\r\n\r\n    // continue to create max heaps until 1 element\r\n    for (let i = dupBlocks.length - 1; i >= 0; i--) {\r\n        // replace greatest element with last not sorted element and ignore last element \r\n        order.push([0, i, null, null])\r\n        swap(dupBlocks, 0, i)\r\n        order.push([0, i, dupBlocks.slice(), null])\r\n        order.push([null, null, null, i])\r\n\r\n        // move top element to result in max heap (ie heapify)\r\n        heapify (dupBlocks, 0, i, order)\r\n    }\r\n\r\n    order.push([null, null, dupBlocks.slice(), null])\r\n    return order \r\n}\r\n\r\n  export default heapSort","// function to swap 2 values \r\n/* a is the index of the first element\r\n   b is the index of the second element \r\n   list the the array of the element */\r\nconst swap = (a, b, list) => {\r\n    let temp = list[a]\r\n    list[a] = list[b]\r\n    list[b] = temp\r\n}\r\n\r\nconst insertionSort = (blocks) => {\r\n    const dupBlocks = blocks.slice()   // copy of the blocks to be manipulated \r\n    const order = []                   // array that stores an array of what blocks are manipulated at each step\r\n\r\n    // start at the unsorted array (second indexed element (ie arr[1])) and go to end \r\n    for (let i = 1; i < dupBlocks.length; i++) {\r\n        let j = i - 1                       // variable to hold index position when going back in list \r\n        let currentElem = dupBlocks[i]      // new element from unsorted list that needs to be sorted  \r\n\r\n        // replace elements until previous element is smaller than currenElement\r\n        order.push([null, null, dupBlocks.slice(), null])\r\n        while (j >=0 && dupBlocks[j] > currentElem) {      \r\n            swap(j, j+1, dupBlocks)\r\n            order.push([j, j+1, null, null]) \r\n            order.push([j, j+1, dupBlocks.slice(), null])\r\n            j-- \r\n        }\r\n        order.push([j, j+1, null, null]) \r\n    }\r\n\r\n    // since elements are added on, elements are only sorted when finished \r\n    for (let i = 0; i < dupBlocks.length; i++) {\r\n        order.push([null, null, null, i]) \r\n    }\r\n    return order\r\n}\r\n\r\nexport default insertionSort ","const combine = (blocks, start, middle, end, order) => {\r\n    // Creating a temp arra that acts as the organzied array \r\n    const temp = []\r\n\r\n    // variables for the position in each array \r\n    // NOTE: variable for temp array is not needed as we know it starts at the 'start' array position\r\n    let pos1 = start                  // starting index for the left side array \r\n    let pos2 = middle+1               // starting index for the right side array \r\n\r\n    // loop to compare the elements in the 2 arrays until one is \"used up\"\r\n    while (pos1 <= middle && pos2 <= end) {\r\n        order.push([pos1, pos2, null, null])\r\n\r\n        // determine the smaller value and add it to the list \r\n        if (blocks[pos1] <= blocks[pos2]) {   \r\n            temp.push(blocks[pos1])        \r\n            pos1++\r\n        } else {\r\n            temp.push(blocks[pos2])\r\n            pos2++\r\n        }\r\n    }\r\n\r\n    // add the left array to the list if it has elements remaining \r\n    while (pos1 <= middle) {\r\n        order.push([pos1, null, blocks.slice(), null])\r\n        temp.push(blocks[pos1])\r\n        pos1++\r\n    }\r\n\r\n    // add the right array to the list if it has element remaining \r\n    while (pos2 <= end) {\r\n        order.push([null, pos2, blocks.slice(), null])\r\n        temp.push(blocks[pos2])\r\n        pos2++\r\n    }\r\n\r\n    // migrating the temp array over to the actual array \r\n    for (let i = start; i <= end; i++) {\r\n        blocks[i] = temp[i - start]\r\n        order.push([i, null, blocks.slice(), null])\r\n    }\r\n}\r\n\r\n// function doing the actual sorting by recursivly breaking down halfs \r\nconst mergeSortWorker = (blocks, start, end, order) => {\r\n    // base case to know when algorithm has been completed \r\n    if (start >= end) {return}\r\n    \r\n    // variable to store where the middle position is \r\n    const middle = Math.floor((start+end)/2)        \r\n\r\n    // use of recursion to break down elements to itself then build up\r\n    mergeSortWorker (blocks, start, middle, order)\r\n    mergeSortWorker (blocks, middle+1, end, order)\r\n    combine (blocks, start, middle, end, order)\r\n} \r\n\r\n// function that is simply called and makes use of other 2 functions \r\n// NOTE: this function is not actually doing the sorting (name may be misleading)\r\n//       it acts more like a preparation to mergsort  \r\nconst mergeSort = (blocks) => {\r\n    const dupBlocks = blocks.slice()   // copy of the blocks to be manipulated \r\n    const order = []                   // array that stores an array of what blocks are manipulated at each step\r\n\r\n    // sorting the elements \r\n    mergeSortWorker (dupBlocks.slice(), 0, dupBlocks.length-1, order)\r\n\r\n    // finalizing elements can only be done at end since unstable \r\n    for (let i = 0; i < dupBlocks.length; i++) {\r\n        order.push([null, null, null, i])\r\n    }\r\n\r\n    return order;\r\n}\r\n\r\nexport default mergeSort ","// function to swap 2 values \r\n/* a is the index of the first element\r\n   b is the index of the second element \r\n   list the the array of the element*/\r\n   const swap = (a, b, list) => {\r\n    let temp = list[a]\r\n    list[a] = list[b]\r\n    list[b] = temp\r\n\r\n}\r\n\r\nconst partition = (dupBlocks, start, end, order) => {\r\n    let pivotSpot = start \r\n    const pivot = start\r\n    order.push([null, null, null, null, pivotSpot])\r\n    for (let i = pivot+1; i <= end; i++) {\r\n        order.push([i, pivot, null, null])\r\n        if (dupBlocks[pivot] > dupBlocks[i]) {\r\n            pivotSpot++\r\n            order.push ([null, null, null, null, pivotSpot])\r\n            swap (pivotSpot, i, dupBlocks)\r\n            order.push ([pivotSpot, i, dupBlocks.slice(), null, pivotSpot])\r\n        }\r\n    }\r\n    return pivotSpot\r\n}\r\n\r\nconst quickSortWorker = (dupBlocks, start, end, order) => {\r\n    // base case to stop recursive call \r\n    if (start >= end) {\r\n        if (start === end) { //case of single block\r\n            order.push ([null, null, null, start])\r\n        }\r\n        return\r\n    }\r\n\r\n    // choose pivot \r\n    const pivot = Math.floor((start+end)/2)\r\n\r\n    // move pivot to temp location \r\n    swap (start, pivot, dupBlocks)\r\n    order.push ([start, pivot, dupBlocks.slice(), null])\r\n\r\n    // partition \r\n    const pivotSpot = partition(dupBlocks, start, end, order)\r\n\r\n    // move pivot into correct place \r\n    swap (start, pivotSpot, dupBlocks)\r\n    order.push ([start, pivotSpot, dupBlocks.slice(), null, null]) // shows the swap of the pivot to it's correct spot \r\n    order.push ([null, null, null, pivotSpot])                     // turns the pivot green \r\n\r\n    // repeat procedure for remainng halves \r\n    if (start <= pivotSpot-1) {\r\n        quickSortWorker (dupBlocks, start, pivotSpot-1, order)\r\n    } \r\n\r\n    if (pivotSpot+1 <= end) {\r\n        quickSortWorker (dupBlocks, pivotSpot+1, end, order)\r\n    }\r\n\r\n    return \r\n}\r\n\r\nconst quickSort = (blocks) => {\r\n    const dupBlocks = blocks.slice()   // copy of the blocks to be manipulated \r\n    const order = []                   // array that stores an array of what blocks are manipulated at each step\r\n\r\n    quickSortWorker(dupBlocks, 0, dupBlocks.length - 1, order)\r\n\r\n    return order \r\n}\r\n\r\nexport default quickSort ","// function to swap 2 values \r\n/* a is the index of the first element\r\n   b is the index of the second element \r\n   list the the array of the element */\r\nconst swap = (a, b, list) => {\r\n    let temp = list[a]\r\n    list[a] = list[b]\r\n    list[b] = temp\r\n}\r\n\r\nconst selectionSort = (blocks) => {\r\n    const dupBlocks = blocks.slice()   // copy of the blocks to be manipulated \r\n    const order = []                  // array that stores an array of what blocks are manipulated at each step\r\n\r\n    for (let i = 0; i <dupBlocks.length; i++) {            // iterate from the from of the list to the end \r\n        for (let j = i; j < dupBlocks.length; j++) {       // iterate from current position until end of list\r\n            order.push([i, j, null, null])\r\n            if (dupBlocks[i] > dupBlocks[j]) {             // compare current index with every element preceedign it \r\n                swap(i, j, dupBlocks)\r\n                order.push([i, j, dupBlocks.slice(), null])\r\n            }\r\n        }\r\n        order.push([null, null, null, i])\r\n    }\r\n\r\n    return order \r\n}\r\n\r\nexport default selectionSort","// Importing react and any other packages \nimport React, {useState, useEffect} from \"react\"\nimport Navbar from \"./Components/Navbar/Navbar\"\nimport Footer from \"./Components/Footer/Footer\"\nimport Blocks from \"./Components/Blocks/Blocks\"\n\n\n// Algorithms \nimport bubbleSort from \"./Algorithms/BubbleSort\"\nimport heapSort from \"./Algorithms/HeapSort\"\nimport insertionSort from \"./Algorithms/InsertionSort\"\nimport mergeSort from \"./Algorithms/MergeSort\"\nimport quickSort from \"./Algorithms/QuickSort\"\nimport selectionSort from \"./Algorithms/SelectionSort\"\n\nconst App = () => {\n//-------------------------------------------------------------------------------------------------------------//\n//-------------------------------------------------------------------------------------------------------------//\n\n  // function that randomizes a sorted list \n  const shuffleArray = (array) => {\n    for (var i = array.length - 1; i > 0; i--) { \n    \n        // Generate random number \n        var j = Math.floor(Math.random() * (i + 1));\n                    \n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n        \n    return array;\n  }\n\n  // Function that generates a array from 1 to length \n  const createNewArray = (number) => {\n    let len = Number(number)\n    const tempBlocks = []               // create new array and fill it \n    for (let i = 1; i < (len+1); i++) {\n      tempBlocks.push(i) \n    }   \n    shuffleArray(tempBlocks)                   // randomize the array and then set it \n    setBlocks(tempBlocks)\n    setSorting(false)\n    setIsSorted(false)\n    setSortedValue([])\n  } \n\n  //-------------------------------------------------------------------------------------------------------------//\n  //-------------------------------------------------------------------------------------------------------------//\n\n  //--------------------------------------creating all useState hooks \n  const [algorithm, setAlgorithm] = useState(()=> \"bubbleSort\")                // Hook that controls which algorithm user selects \n  const [blocks, setBlocks] = useState(() => [])                               // Hook controlling the array of blocks \n  const [compare, setCompare] = useState(() => [])                             // Hook controlling which 2 blocks are being compared\n  const [swap, setSwap] = useState(() => [])                                   // Hook controlling when 2 blocks need to be swapped             \n  const [sortedValue, setSortedValue] = useState(() => [])                     // Hook that determines which values have been sorted \n  const [sorting, setSorting] = useState(() => false)                          // Hook used to prevent glitches from buttons when sorting \n  const [isSorted, setIsSorted] = useState(() => false)                        // Hook used to prevent resorting if already sorted\n  const [speed, setSpeed] = useState(() => 100)                                // Hook used to control the speed of the sorting\n  const [size, setSize] = useState(() => 40)                                   // Hook used to control the number of elements in the array\n  const [quickIndex, setQuickIndex] = useState(() => null)                     // Hook used to show moving index for quicksort \n  const [hideDetails, setHideDetails] = useState(() => true)                   // Hook used to open and close the details menu \n\n  // Loading the inital array of blocks \n  if (blocks.length === 0) {\n    createNewArray(size)\n  }\n\n  // Event handler to change the algorithm value when triggered by selection change\n  const handleAlgorithm = (event) => {\n    setAlgorithm(event.target.value)\n  }\n\n  // Event handler to open and close details menu \n  const handleDetails = () => {\n    setHideDetails(!hideDetails)\n  }\n\n  // Event handler to randomize the array when button is pressed \n  const handleRandomize = () => {\n    setSortedValue([])\n    createNewArray(size)\n    setIsSorted(false)\n    setSorting(false)\n  }\n\n  // Function to update the speed when user adjusts it \n  const handleSpeed = (value) => {\n    setSpeed(value)\n  }\n\n  // Function to update the speed when user adjusts it \n  const handleSize = (sizePassed) => {\n    let restrainedSize\n    if (sizePassed < 5) { \n      restrainedSize = 5\n    } else if (sizePassed > 100) {\n      restrainedSize = 100\n    } else {\n      restrainedSize = sizePassed\n    }\n    setSize(restrainedSize)\n  }\n\n  // Function to visually display the sorting \n  const handleSort = () => {\n    // do not sort if array is already sorted \n    if (isSorted) {return}\n  \n    // The Immdediately invoked function expression acts like a while loop \n    // that stops once all stored values have been executed \n    const sortArray = (values) => {\n      (function loop(i) {\n          setTimeout(function () {\n            // obtain the current sorted \"frame\" of blocks \n            const [j, k, arr, inPlace, quickIndex] = values[i]      \n            setCompare([j, k])\n            setSwap([])\n\n            // when the end of one iteration is met update the sorted compoennts \n            if(inPlace !== null){\n              setSortedValue((prevState) => (\n                // Take the previous state(s) and add on new state\n                [...prevState, inPlace]    \n              ))\n            }\n\n            // when array is valid update the display and store the values being swapped\n            if(arr){\n              setBlocks(arr)\n              if(j !== null || k != null)\n                setSwap([j, k])\n            }\n\n            // continue to sort until end of iterations\n            if (++i < values.length){\n              loop(i)\n            } else {\n              setSorting(false) \n            }\n\n            // setting the quick sort index that will be swapped \n            if (quickIndex >= 0) {\n              setQuickIndex(quickIndex)\n            }\n\n          }, speed)       \n      })(0)\n    }\n\n    // determine which algorithm to use when sorting \n    if (algorithm === \"bubbleSort\") {sortArray(bubbleSort(blocks))}\n    else if (algorithm === \"heapSort\") {sortArray(heapSort(blocks))}\n    else if (algorithm === \"insertionSort\") {sortArray(insertionSort(blocks))}\n    else if (algorithm === \"selectionSort\") {sortArray(selectionSort(blocks))}\n    else if (algorithm === \"mergeSort\") {sortArray(mergeSort(blocks))}\n    else if (algorithm === \"quickSort\") {sortArray(quickSort(blocks))}\n    \n    setSorting(true)\n    setIsSorted(true)\n  }\n\n  // Generating random array every time the length is changed by th user\n\tuseEffect(() => {\n    // usage of keyboard numerical input causes a unintended error (ie if the user enters a value below \n    // 5 then the array will readjust to 5, but any subsequent typed values will be a multiple of itself, \n    // mulipled by 10. Ex 10 becomed 100, 15 becomes 150, etc). As a solution the mod 100 has been introduced\n    // to avoid this error. This was the solution chosen as I was not able to determine the root cause.\n    // The value of size is within range and is what I expect, but it still results in an error. All values passed \n    // into the createNewArray are also between 1 and 100. In addition for the function handleSize, I have explicitly \n    // implemented an if statement that filters all invalid values and yet vlaue for the size of the array still \n    // surpases 100 without the %100. \n    // UPDATE: error was the value passed into the createNewArray(), I had assumed the value was an integer, but it was not. When I \n    // added one to the value I got itself x10 +1 (ie 20 -> 201) but since the for loop starts at 1 I saw 200\n      createNewArray(size)\n\t}, [size])\n\n\n  return (\n    <div className =\"App\" style={{\n        display: 'grid', \n        boxSizing: 'border-box', \n        minHeight: '100%',\n        backgroundColor: '#0b1616'\n      }}>\n      <Navbar \n        algorithm = {algorithm}\n        handleAlgorithm = {handleAlgorithm}\n        handleDetails = {handleDetails}\n        handleRandomize = {handleRandomize}\n        handleSort = {handleSort}\n        handleSpeed = {handleSpeed}\n        handleSize = {handleSize}\n        sorting = {sorting}\n        speed = {speed}\n        size = {size}\n      />\n      <Blocks \n        algorithm = {algorithm}\n        blocks = {blocks}\n        compare={sorting && compare}\n        details = {hideDetails}\n\t\t\t\tswap={sorting && swap}\n        sortedValue = {sortedValue} \n        quickIndex = {quickIndex}\n      />\n      <Footer/>\n    </div>\n  )\n} \n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}